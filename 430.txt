Why does rendering take so long ? Edit : I mean image synthesis , or computer graphics , for example turning a 3D model into a realistic animation . Explain like I'm five. <>TL;DR It 's just lots of calculations that get easier over time as hardware gets more advanced and cheaper so you can do more calculations in a shorter time , and better algorithms \/ engines are made that limit the number of calculations needed to get a nice - looking render . Rotating models : For something very simple , take a model of a person . The model is made up of points , each of those is made up of 3 numbers ( x , y , z ) . Depending on how realistic you want the person to look , the model could be a thousand points so that you get very fine details . That 's already 3,000 numbers just for that person . Now to do something as simple as rotating the person a bit to the left , you have to multiply all 3,000 of the numbers by something called a \" rotation matrix \" made up of the cosine and sine values of the angle you want to rotate them by . So you have to get the cosine and sine values of the angle you 're rotating by , then go through all 3,000 of the numbers and multiply them . Another minor problem : the rotation matrix rotates the points around ( 0,0,0 ) . So if your model is sitting at ( 1,0,2 ) , you have to subtract ( 1,0,2 ) from all the points , multiply all the points by the rotation matrix , then move it back to its original position by adding ( 1,0,2 ) . Some lighting : Then if you want light reflection to make your person look better , you need to look at polygons . Each polygon is made of 3 of the aforementioned points ( some points are shared by different polygons , so it is n't just 1,000\/3 polygons ) . The infamous low - poly Lara Croft with pyramid boobs was made of just a few polygons . Each of these polygons has a \" normal \" , i.e. the way it faces . Each of those normals is 3 numbers . If your model is moving around and going through animations , you have to calculate the polygon normals any time you want to use them , which is done with a few subtractions and multiplications of the polygon 's points ' components . Once you have all those normals , you can go through and get rid of the polygons that are n't facing the camera , which itself takes calculations but will save you calculations later . Once you have the polygons that matter and their normals , you take into account the lighting position ( sun , a lamp , etc . ) and camera position , and brighten up the color of certain polygons based on their normals . Coloring : Speaking of color , now you have to apply color to all those polygons , so you take the texture of the person model and wrap it around all the polygons . The problem is , the artist drawing and coloring the texture was working with and coloring textels in their artist software . All you have are the pixels on the screen . If you have a really high res texture slanted to the side on a low res screen , you have way fewer screen pixels than the textels that the artist crammed into the texture . So essentially you just end up going along the texture , sampling it as often as you can and coloring the pixels on the screen . You can try to fix that by sampling multiple textels and coloring each pixel based on that , but that 's more calculations . Then , because you 're working with a grid of pixels on a screen , edges of polygons look jagged and overly defined ( go into paint and use the line tool , it will look sort of \" terraced \" , breaking up the smoothness of the line ) . This is called aliasing . There are anti - aliasing techniques that smooth out the jaggedness of polygon edges , but again , that creates more calculations . Now if you want something like a mirror , you essentially just render a new viewpoint looking outward from the mirror , crop it down to the shape of the mirror , and paste it over the scene . More lighting , more coloring , fewer polygons you can cull , more calculations . Now rotate every model in the scene , move it to its appropriate position , calculate normals , wrap all the textures , make them brighter based on the polygon they 're wrapped around , and do it all 30 - 60 times for every second of video that you want .<>Rendering can take a long time because creating a realistic image or animation requires a lot of complex calculations. When you create a 3D model, you are essentially creating a virtual world with all of the objects and characters in it. To turn that virtual world into a realistic image or animation, the computer has to do a lot of math to figure out how light should bounce off of each object and how each object should look from different angles. This process is called rendering, and it can be very time-consuming because there are so many calculations involved.\\n\\nThink of it like this: imagine you are trying to draw a picture of a room with a bunch of different objects in it. You would have to think about how the light is hitting each object, how the shadows are falling on the floor and walls, and how the objects look from different angles. This would be a lot of work, and it would take a long time to get everything right. The same is true for a computer when it is rendering an image or animation. It has to do a lot of complex math to make everything look realistic, and that takes time.<>reddit_eli5